// <auto-generated />
using System;
using CFU.UniversityManagement.Infrastructure;
using CFU.UniversityManagement.Infrastructure.Structure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CFU.UniversityManagement.WebAPI.Migrations
{
    [DbContext(typeof(UniversityManagementDBContext))]
    [Migration("20220313114718_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CFU.Domain.StructureContext.AcademyAggregate.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDisbanded")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("academies", (string)null);
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.AcademyAggregate.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("faculties", (string)null);
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.FacultyAggregate.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.FacultyAggregate.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("faculties", (string)null);
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.InstituteAggregate.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.InstituteAggregate.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDisbanded")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("institutes", (string)null);
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.AcademyAggregate.Faculty", b =>
                {
                    b.HasOne("CFU.Domain.StructureContext.AcademyAggregate.Academy", null)
                        .WithMany("Faculties")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.FacultyAggregate.Department", b =>
                {
                    b.HasOne("CFU.Domain.StructureContext.FacultyAggregate.Faculty", null)
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.FacultyAggregate.Faculty", b =>
                {
                    b.HasOne("CFU.Domain.StructureContext.AcademyAggregate.Faculty", null)
                        .WithOne()
                        .HasForeignKey("CFU.Domain.StructureContext.FacultyAggregate.Faculty", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.InstituteAggregate.Department", b =>
                {
                    b.HasOne("CFU.Domain.StructureContext.FacultyAggregate.Department", null)
                        .WithOne()
                        .HasForeignKey("CFU.Domain.StructureContext.InstituteAggregate.Department", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CFU.Domain.StructureContext.InstituteAggregate.Institute", null)
                        .WithMany("Departments")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.AcademyAggregate.Academy", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.FacultyAggregate.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("CFU.Domain.StructureContext.InstituteAggregate.Institute", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
